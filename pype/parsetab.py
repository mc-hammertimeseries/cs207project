
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1DBBFB448E18C26B4F53B6842563E856'
    
_lr_action_items = {'LPAREN':([0,2,3,5,7,8,9,11,12,14,15,16,18,19,20,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,49,50,51,52,53,54,55,57,58,],[4,-4,4,-5,13,-3,-2,-27,13,-28,-9,-26,-7,-8,29,13,13,29,13,13,13,-6,-15,-11,-17,29,13,-30,13,13,-13,29,13,-21,13,13,-14,-10,-25,-29,-23,-12,-24,-20,-22,-19,-16,]),'INPUT':([13,],[20,]),'IMPORT':([4,],[10,]),'STRING':([7,11,12,14,15,16,19,22,23,25,26,27,31,34,35,36,37,38,40,41,42,43,47,49,50,51,52,53,54,55,57,],[14,-27,14,-28,-9,-26,-8,14,14,14,14,14,-11,14,-30,14,14,-13,14,-21,14,14,-10,-25,-29,-23,-12,-24,-20,-22,-19,]),'LBRACE':([0,2,3,5,8,9,18,28,],[1,-4,1,-5,-3,-2,-7,-6,]),'NUMBER':([7,11,12,14,15,16,19,22,23,25,26,27,31,34,35,36,37,38,40,41,42,43,47,49,50,51,52,53,54,55,57,],[11,-27,11,-28,-9,-26,-8,11,11,11,11,11,-11,11,-30,11,11,-13,11,-21,11,11,-10,-25,-29,-23,-12,-24,-20,-22,-19,]),'RPAREN':([11,14,16,17,20,24,26,30,31,32,33,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-27,-28,-26,28,31,38,41,-15,-11,-17,47,-30,49,51,-13,52,53,-21,54,55,-14,-10,57,-25,-29,-23,-12,-24,-20,-22,58,-19,-16,]),'RBRACE':([11,12,14,15,16,19,31,38,41,47,49,51,52,53,54,55,57,],[-27,18,-28,-9,-26,-8,-11,-13,-21,-10,-25,-23,-12,-24,-20,-22,-19,]),'$end':([2,3,5,6,8,9,18,28,],[-4,-1,-5,0,-3,-2,-7,-6,]),'ASSIGN':([13,],[21,]),'OP_SUB':([13,],[23,]),'OP_ADD':([13,],[27,]),'OUTPUT':([13,],[24,]),'OP_MUL':([13,],[25,]),'ID':([1,7,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,57,58,],[7,16,17,-27,16,26,-28,-9,-26,-8,32,34,16,16,32,16,16,16,45,-15,-11,-17,32,16,-30,16,16,-13,32,16,-21,16,16,56,-18,-14,-10,-25,-29,-23,-12,-24,-20,-22,-19,-16,]),'OP_DIV':([13,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([7,12,22,23,25,26,27,34,36,37,40,42,43,],[15,19,35,35,35,35,35,48,50,50,50,50,50,]),'import_statement':([0,3,],[2,8,]),'expression_list':([7,],[12,]),'type':([29,],[44,]),'statement_list':([0,],[3,]),'declaration':([20,24,33,39,],[30,30,46,46,]),'component':([0,3,],[5,9,]),'parameter_list':([22,23,25,26,27,],[36,37,40,42,43,]),'declaration_list':([20,24,],[33,39,]),'program':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',24),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',28),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',32),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',33),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_input_expression','parser.py',41),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_input_expression','parser.py',42),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_output_expression','parser.py',49),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_output_expression','parser.py',50),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',57),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',58),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',66),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',67),
  ('type -> ID','type',1,'p_type','parser.py',74),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assign_expression','parser.py',78),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_parameter_list_expression','parser.py',82),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_parameter_list_expression','parser.py',83),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_add_expression','parser.py',90),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_sub_expression','parser.py',94),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_div_expression','parser.py',102),
  ('expression -> ID','expression',1,'p_id','parser.py',106),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',110),
  ('expression -> STRING','expression',1,'p_string','parser.py',114),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',118),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',119),
]
