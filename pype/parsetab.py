
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '3DF777571C50D76B14EF879F4B0949A6'
    
_lr_action_items = {'RPAREN':([13,15,16,17,20,22,25,29,30,31,32,33,35,36,37,38,39,40,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,],[-28,-26,-27,28,32,38,42,-30,44,46,-13,-17,49,-15,51,-21,52,53,-11,55,-22,-29,-24,-12,-14,-23,-20,-25,57,-10,58,-19,-16,]),'NUMBER':([9,12,13,14,15,16,18,19,21,22,23,27,29,30,31,32,37,38,39,40,41,42,44,45,46,49,51,52,53,55,57,],[16,16,-28,-9,-26,-27,16,16,16,16,16,-8,-30,16,16,-13,16,-21,16,16,16,-11,-22,-29,-24,-12,-23,-20,-25,-10,-19,]),'LPAREN':([0,2,4,6,7,8,9,12,13,14,15,16,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,55,57,58,],[5,5,-4,-5,-3,-2,11,11,-28,-9,-26,-27,11,11,34,11,11,11,34,-7,-8,-6,-30,11,11,-13,-17,34,-15,11,-21,11,11,11,-11,34,-22,-29,-24,-12,-14,-23,-20,-25,-10,-19,-16,]),'OP_ADD':([11,],[18,]),'STRING':([9,12,13,14,15,16,18,19,21,22,23,27,29,30,31,32,37,38,39,40,41,42,44,45,46,49,51,52,53,55,57,],[13,13,-28,-9,-26,-27,13,13,13,13,13,-8,-30,13,13,-13,13,-21,13,13,13,-11,-22,-29,-24,-12,-23,-20,-25,-10,-19,]),'OUTPUT':([11,],[20,]),'OP_SUB':([11,],[21,]),'ID':([3,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[9,15,17,22,15,-28,-9,-26,-27,15,15,33,15,15,15,41,33,-8,-30,15,15,-13,-17,47,33,-15,15,-21,15,15,15,-11,33,-22,-29,-24,-18,56,-12,-14,-23,-20,-25,-10,-19,-16,]),'$end':([1,2,4,6,7,8,26,28,],[0,-1,-4,-5,-3,-2,-7,-6,]),'OP_DIV':([11,],[23,]),'RBRACE':([12,13,14,15,16,27,32,38,42,44,46,49,51,52,53,55,57,],[26,-28,-9,-26,-27,-8,-13,-21,-11,-22,-24,-12,-23,-20,-25,-10,-19,]),'OP_MUL':([11,],[19,]),'LBRACE':([0,2,4,6,7,8,26,28,],[3,3,-4,-5,-3,-2,-7,-6,]),'ASSIGN':([11,],[24,]),'INPUT':([11,],[25,]),'IMPORT':([5,],[10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'expression_list':([9,],[12,]),'parameter_list':([18,19,21,22,23,],[30,31,37,39,40,]),'declaration_list':([20,25,],[35,43,]),'declaration':([20,25,35,43,],[36,36,50,50,]),'expression':([9,12,18,19,21,22,23,30,31,37,39,40,41,],[14,27,29,29,29,29,29,45,45,45,45,45,54,]),'import_statement':([0,2,],[4,7,]),'type':([34,],[48,]),'component':([0,2,],[6,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',10),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',17),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',18),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',19),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',20),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',29),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',34),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',39),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',40),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_input_expression','parser.py',49),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_input_expression','parser.py',50),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_output_expression','parser.py',58),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_output_expression','parser.py',59),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',67),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',68),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',77),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',78),
  ('type -> ID','type',1,'p_type','parser.py',86),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assign_expression','parser.py',91),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_parameter_list_expression','parser.py',96),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_parameter_list_expression','parser.py',97),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',105),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',110),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',115),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',120),
  ('expression -> ID','expression',1,'p_id','parser.py',125),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',130),
  ('expression -> STRING','expression',1,'p_string','parser.py',135),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',140),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',141),
]
